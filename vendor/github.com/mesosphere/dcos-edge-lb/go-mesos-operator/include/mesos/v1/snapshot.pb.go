// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/mesosphere/dcos-edge-lb/go-mesos-operator/include/mesos/v1/snapshot.proto

package mesos_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type FrameworkSnapshot struct {
	// Frameworkid to Framework
	Frameworks map[string]*FrameworkInfo `protobuf:"bytes,1,rep,name=frameworks" json:"frameworks,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Taskid to Task
	Tasks map[string]*Task `protobuf:"bytes,2,rep,name=tasks" json:"tasks,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Agentid to Agent
	Agents           map[string]*AgentInfo `protobuf:"bytes,3,rep,name=agents" json:"agents,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *FrameworkSnapshot) Reset()                    { *m = FrameworkSnapshot{} }
func (m *FrameworkSnapshot) String() string            { return proto.CompactTextString(m) }
func (*FrameworkSnapshot) ProtoMessage()               {}
func (*FrameworkSnapshot) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *FrameworkSnapshot) GetFrameworks() map[string]*FrameworkInfo {
	if m != nil {
		return m.Frameworks
	}
	return nil
}

func (m *FrameworkSnapshot) GetTasks() map[string]*Task {
	if m != nil {
		return m.Tasks
	}
	return nil
}

func (m *FrameworkSnapshot) GetAgents() map[string]*AgentInfo {
	if m != nil {
		return m.Agents
	}
	return nil
}

type SnapshotRequest struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *SnapshotRequest) Reset()                    { *m = SnapshotRequest{} }
func (m *SnapshotRequest) String() string            { return proto.CompactTextString(m) }
func (*SnapshotRequest) ProtoMessage()               {}
func (*SnapshotRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func init() {
	proto.RegisterType((*FrameworkSnapshot)(nil), "mesos.v1.FrameworkSnapshot")
	proto.RegisterType((*SnapshotRequest)(nil), "mesos.v1.SnapshotRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SnapshotSubscribe service

type SnapshotSubscribeClient interface {
	StreamSnapshot(ctx context.Context, in *SnapshotRequest, opts ...grpc.CallOption) (SnapshotSubscribe_StreamSnapshotClient, error)
}

type snapshotSubscribeClient struct {
	cc *grpc.ClientConn
}

func NewSnapshotSubscribeClient(cc *grpc.ClientConn) SnapshotSubscribeClient {
	return &snapshotSubscribeClient{cc}
}

func (c *snapshotSubscribeClient) StreamSnapshot(ctx context.Context, in *SnapshotRequest, opts ...grpc.CallOption) (SnapshotSubscribe_StreamSnapshotClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_SnapshotSubscribe_serviceDesc.Streams[0], c.cc, "/mesos.v1.SnapshotSubscribe/StreamSnapshot", opts...)
	if err != nil {
		return nil, err
	}
	x := &snapshotSubscribeStreamSnapshotClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SnapshotSubscribe_StreamSnapshotClient interface {
	Recv() (*FrameworkSnapshot, error)
	grpc.ClientStream
}

type snapshotSubscribeStreamSnapshotClient struct {
	grpc.ClientStream
}

func (x *snapshotSubscribeStreamSnapshotClient) Recv() (*FrameworkSnapshot, error) {
	m := new(FrameworkSnapshot)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for SnapshotSubscribe service

type SnapshotSubscribeServer interface {
	StreamSnapshot(*SnapshotRequest, SnapshotSubscribe_StreamSnapshotServer) error
}

func RegisterSnapshotSubscribeServer(s *grpc.Server, srv SnapshotSubscribeServer) {
	s.RegisterService(&_SnapshotSubscribe_serviceDesc, srv)
}

func _SnapshotSubscribe_StreamSnapshot_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SnapshotRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SnapshotSubscribeServer).StreamSnapshot(m, &snapshotSubscribeStreamSnapshotServer{stream})
}

type SnapshotSubscribe_StreamSnapshotServer interface {
	Send(*FrameworkSnapshot) error
	grpc.ServerStream
}

type snapshotSubscribeStreamSnapshotServer struct {
	grpc.ServerStream
}

func (x *snapshotSubscribeStreamSnapshotServer) Send(m *FrameworkSnapshot) error {
	return x.ServerStream.SendMsg(m)
}

var _SnapshotSubscribe_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mesos.v1.SnapshotSubscribe",
	HandlerType: (*SnapshotSubscribeServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamSnapshot",
			Handler:       _SnapshotSubscribe_StreamSnapshot_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/mesosphere/dcos-edge-lb/go-mesos-operator/include/mesos/v1/snapshot.proto",
}

func init() {
	proto.RegisterFile("github.com/mesosphere/dcos-edge-lb/go-mesos-operator/include/mesos/v1/snapshot.proto", fileDescriptor1)
}

var fileDescriptor1 = []byte{
	// 368 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0xd1, 0x6a, 0xe2, 0x40,
	0x14, 0x86, 0x37, 0x06, 0x65, 0xf7, 0x08, 0xba, 0xc6, 0x8b, 0xcd, 0xa6, 0x14, 0x44, 0x4a, 0x6b,
	0x29, 0x49, 0xaa, 0x57, 0xa5, 0x14, 0x4a, 0x85, 0x96, 0x96, 0x96, 0xd2, 0x46, 0xe9, 0xfd, 0x24,
	0x1e, 0x13, 0xd1, 0x64, 0xd2, 0x99, 0x89, 0xc5, 0xc7, 0xec, 0x1b, 0x95, 0x4c, 0x8c, 0x51, 0x2b,
	0x5e, 0xf5, 0x2e, 0x9c, 0xf9, 0xbf, 0x6f, 0x7e, 0x4e, 0x06, 0x86, 0xfe, 0x44, 0x04, 0x89, 0x6b,
	0x79, 0x34, 0xb4, 0x43, 0xe4, 0x94, 0xc7, 0x01, 0x32, 0xb4, 0x47, 0x1e, 0xe5, 0x26, 0x8e, 0x7c,
	0x34, 0x67, 0xae, 0xed, 0x53, 0x53, 0x1e, 0x99, 0x34, 0x46, 0x46, 0x04, 0x65, 0xf6, 0x24, 0xf2,
	0x66, 0xc9, 0x08, 0x33, 0xc2, 0x9e, 0x77, 0x6d, 0x1e, 0x91, 0x98, 0x07, 0x54, 0x58, 0x31, 0xa3,
	0x82, 0x6a, 0xbf, 0xe5, 0x81, 0x35, 0xef, 0x1a, 0xaf, 0x3f, 0xe3, 0xcf, 0x7c, 0x52, 0xde, 0xfe,
	0x54, 0xa1, 0x71, 0xc7, 0x48, 0x88, 0x1f, 0x94, 0x4d, 0x07, 0xcb, 0x8b, 0xb5, 0x47, 0x80, 0x71,
	0x3e, 0xe4, 0xba, 0xd2, 0x52, 0x3b, 0xd5, 0xde, 0x99, 0x95, 0xf7, 0xb0, 0xbe, 0x01, 0xc5, 0x84,
	0xdf, 0x46, 0x82, 0x2d, 0x9c, 0x35, 0x5c, 0xbb, 0x82, 0xb2, 0x20, 0x7c, 0xca, 0xf5, 0x92, 0xf4,
	0x1c, 0xef, 0xf3, 0x0c, 0xd3, 0x60, 0xa6, 0xc8, 0x20, 0xed, 0x1a, 0x2a, 0xc4, 0xc7, 0x48, 0x70,
	0x5d, 0x95, 0xf8, 0xc9, 0x3e, 0xfc, 0x46, 0x26, 0x33, 0x7e, 0x89, 0x19, 0x6f, 0x50, 0xdf, 0x6a,
	0xa7, 0xfd, 0x05, 0x75, 0x8a, 0x0b, 0x5d, 0x69, 0x29, 0x9d, 0x3f, 0x4e, 0xfa, 0xa9, 0x99, 0x50,
	0x9e, 0x93, 0x59, 0x82, 0x7a, 0xa9, 0xa5, 0x74, 0xaa, 0xbd, 0x7f, 0x3b, 0x2e, 0x79, 0x88, 0xc6,
	0xd4, 0xc9, 0x52, 0x97, 0xa5, 0x0b, 0xc5, 0xb8, 0x07, 0x28, 0xda, 0xee, 0x50, 0x1e, 0x6d, 0x2a,
	0x6b, 0x85, 0x32, 0xc5, 0xd6, 0x4d, 0xcf, 0x50, 0x5d, 0x2b, 0xbe, 0x43, 0x75, 0xba, 0xa9, 0x6a,
	0x16, 0x2a, 0xc9, 0x6d, 0x35, 0x6b, 0x37, 0xa0, 0x9e, 0x6f, 0xc4, 0xc1, 0xf7, 0x04, 0xb9, 0xe8,
	0x11, 0x68, 0xe4, 0xa3, 0x41, 0xe2, 0x72, 0x8f, 0x4d, 0x5c, 0xd4, 0x9e, 0xa0, 0x36, 0x10, 0x0c,
	0x49, 0xb8, 0xfa, 0xef, 0xff, 0x0b, 0xf3, 0x96, 0xc1, 0x38, 0xd8, 0xb3, 0xf7, 0xf6, 0xaf, 0x73,
	0xa5, 0x7f, 0x08, 0x4d, 0xca, 0x7c, 0x8b, 0xc4, 0xc4, 0x0b, 0x70, 0x15, 0xee, 0x57, 0x5e, 0xd2,
	0x77, 0xc6, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x35, 0x22, 0x65, 0xf2, 0x1c, 0x03, 0x00, 0x00,
}
